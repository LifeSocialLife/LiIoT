LiIoT.Services.Communication.MQTT.MqttServerService
LiIoT.Services.Communication.MQTT.MqttServerService.Check() -> void
LiIoT.Services.Communication.MQTT.MqttServerService.GetClientsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IList<MQTTnet.Server.Status.IMqttClientStatus!>!>!
LiIoT.Services.Communication.MQTT.MqttServerService.GetSessionsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IList<MQTTnet.Server.Status.IMqttSessionStatus!>!>!
LiIoT.Services.Communication.MQTT.MqttServerService.Init() -> bool
LiIoT.Services.Communication.MQTT.MqttServerService.IsRunning.get -> bool
LiIoT.Services.Communication.MQTT.MqttServerService.IsRunning.set -> void
LiIoT.Services.Communication.MQTT.MqttServerService.MqttServerService(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.Communication.MQTT.MqttServerService!>! logger, LiIoT.Services.RunDataService! rundataService, LiIoT.Services.ConfigFileService! configFileService, LiIoT.Services.Core.SystemCancellationTokenService! systemCancellationTokenService) -> void
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.ClientId.get -> string!
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.ClientId.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.DtAdded.get -> System.DateTime
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.DtAdded.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.Message.get -> string!
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.Message.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel.MqttTopicMessagesModel() -> void
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Message.get -> string!
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Message.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Messages.get -> System.Collections.Generic.List<LiIoT.Services.Communication.MQTT.MqttTopicMessagesModel!>!
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Messages.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.MqttTopicSubscriberModel() -> void
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Poster.get -> System.Collections.Generic.List<string!>!
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Poster.set -> void
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Subscriber.get -> System.Collections.Generic.List<string!>!
LiIoT.Services.Communication.MQTT.MqttTopicSubscriberModel.Subscriber.set -> void
LiIoT.Services.ConfigFileService
LiIoT.Services.ConfigFileService.ConfigFile.get -> LiIoT.Models.Configuration.ConfigFileModel!
LiIoT.Services.ConfigFileService.ConfigFile.set -> void
LiIoT.Services.ConfigFileService.ConfigFileService(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.ConfigFileService!>! logger, LiIoT.Services.RunDataService! runDataService) -> void
LiIoT.Services.ConfigFileService.ConfigurationFileRead() -> bool
LiIoT.Services.ConfigFileService.ConfigurationFileSave(LiIoT.Models.Configuration.ConfigFileModel? data = null, string? path = null) -> bool
LiIoT.Services.ConfigFileService.LocateConfigurationFile(bool saveToRundata = true) -> string!
LiIoT.Services.Contracts.LiIoTCoreService
LiIoT.Services.Contracts.LiIoTCoreService.LiIoTCoreService() -> void
LiIoT.Services.Contracts.LiIoTCoreService.Start() -> void
LiIoT.Services.Core.ParallelTask
LiIoT.Services.Core.SystemCancellationTokenService
LiIoT.Services.Core.SystemCancellationTokenService.Cancel() -> void
LiIoT.Services.Core.SystemCancellationTokenService.SystemCancellationTokenService() -> void
LiIoT.Services.Core.SystemCancellationTokenService.Token.get -> System.Threading.CancellationToken
LiIoT.Services.Db.DevicesModel
LiIoT.Services.Db.DevicesModel.DevicesModel() -> void
LiIoT.Services.Db.LiteDbService
LiIoT.Services.Db.LiteDbService.Db.get -> LiteDB.Async.LiteDatabaseAsync!
LiIoT.Services.Db.LiteDbService.DbInit() -> bool
LiIoT.Services.Db.LiteDbService.LiteDbService(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.Db.LiteDbService!>! logger, LiIoT.Services.RunDataService! runDataService) -> void
LiIoT.Services.Db.LiteDbService._lock -> System.Threading.Semaphore!
LiIoT.Services.Db.LiteDbServicesDevices
LiIoT.Services.Db.LiteDbServicesDevices.GetAll() -> System.Threading.Tasks.Task<System.Tuple<bool, System.Collections.Generic.List<LiIoT.Models.DbLite.DbDeviceModel!>!>!>!
LiIoT.Services.Db.LiteDbServicesDevices.LiteDbServicesDevices(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.Db.LiteDbServicesDevices!>! logger, LiIoT.Services.RunDataService! runDataService, LiIoT.Services.Db.LiteDbService! liteDbService) -> void
LiIoT.Services.Devices.DeviceEnums
LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes
LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes.Relay = 0 -> LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes
LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes.Sensor = 1 -> LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes
LiIoT.Services.Devices.DeviceIdentifyModel
LiIoT.Services.Devices.DeviceIdentifyModel.DeviceIdentifyModel() -> void
LiIoT.Services.Devices.DeviceIdentifyModel.Manufacturer.get -> LiIoT.Services.Devices.DeviceManufacturerEnum
LiIoT.Services.Devices.DeviceIdentifyModel.Manufacturer.set -> void
LiIoT.Services.Devices.DeviceItemUpdateModel
LiIoT.Services.Devices.DeviceItemUpdateModel.DeviceItemUpdateModel() -> void
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemDtvalue.get -> System.DateTime
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemDtvalue.set -> void
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemId.get -> string!
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemId.set -> void
LiIoT.Services.Devices.DeviceItemUpdateModel.Itemtype.get -> LiIoT.Services.Devices.DeviceEnums.DeviceItemsTypes
LiIoT.Services.Devices.DeviceItemUpdateModel.Itemtype.set -> void
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemValue.get -> string!
LiIoT.Services.Devices.DeviceItemUpdateModel.ItemValue.set -> void
LiIoT.Services.Devices.DeviceManufacturerEnum
LiIoT.Services.Devices.DeviceManufacturerEnum.Shelly = 1 -> LiIoT.Services.Devices.DeviceManufacturerEnum
LiIoT.Services.Devices.DeviceManufacturerEnum.Unknown = 0 -> LiIoT.Services.Devices.DeviceManufacturerEnum
LiIoT.Services.Devices.DeviceService
LiIoT.Services.Devices.DeviceService.DeviceItemDataAdd.set -> void
LiIoT.Services.Devices.DeviceService.DeviceService(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.Devices.DeviceService!>! logger, LiIoT.Services.RunDataService! rundataService, LiIoT.Services.ConfigFileService! configFileService, LiIoT.Services.Db.LiteDbService! liteDbService, LiIoT.Services.Db.LiteDbServicesDevices! liteDbServicesDevices) -> void
LiIoT.Services.Devices.DeviceService.IdentifyDevice(string! ip) -> System.Threading.Tasks.Task<System.Tuple<bool, LiIoT.Services.Devices.DeviceIdentifyModel!>!>!
LiIoT.Services.RunDataService
LiIoT.Services.RunDataService.Folders.get -> LiIoT.Models.Rundata.RundataServiceFoldersModel!
LiIoT.Services.RunDataService.Folders.set -> void
LiIoT.Services.RunDataService.Hardware.get -> LiIoT.Models.Rundata.RundataServiceHardwareModel!
LiIoT.Services.RunDataService.Hardware.set -> void
LiIoT.Services.RunDataService.RunDataService(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.RunDataService!>! logger) -> void
LiIoT.Services.RunDataService.RunningAs.get -> LiIoT.Services.RunningAsEnum
LiIoT.Services.RunDataService.RunningAs.set -> void
LiIoT.Services.RunDataService.SetHardwareModel() -> bool
LiIoT.Services.RunDataService.StartUpRunningPart.get -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.RunDataService.StartUpRunningPart.set -> void
LiIoT.Services.RunDataService.StartUpRunningStage.get -> ushort
LiIoT.Services.RunDataService.StartUpRunningStage.set -> void
LiIoT.Services.RunningAsEnum
LiIoT.Services.RunningAsEnum.Master = 1 -> LiIoT.Services.RunningAsEnum
LiIoT.Services.RunningAsEnum.None = 0 -> LiIoT.Services.RunningAsEnum
LiIoT.Services.RunningAsEnum.Slave = 2 -> LiIoT.Services.RunningAsEnum
LiIoT.Services.SoftwareRulesAndStaticData
LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.CheckingNodes = 4 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.Error = 8 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.Init = 1 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.None = 0 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.ReadingConfiguration = 2 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.ReadingDataFiles = 3 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.Running = 7 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.Standby = 6 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.StartUpRunningPartEnum.StartingServices = 5 -> LiIoT.Services.StartUpRunningPartEnum
LiIoT.Services.Worker
LiIoT.Services.Worker.Worker(Microsoft.Extensions.Logging.ILogger<LiIoT.Services.Worker!>! logger, Microsoft.Extensions.Hosting.IHostApplicationLifetime! hostappLifetime, Microsoft.Extensions.Configuration.IConfiguration! configuration, LiIoT.Services.RunDataService! rundataService, LiIoT.Services.ConfigFileService! configFileService, LiIoT.Services.Db.LiteDbService! liteDbService, LiIoT.Services.Db.LiteDbServicesDevices! liteDbServicesDevices, LiIoT.Services.Communication.MQTT.MqttServerService! mqttServerService) -> void
override LiIoT.Services.Communication.MQTT.MqttServerService.OnStart() -> void
override LiIoT.Services.Worker.ExecuteAsync(System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task!
static LiIoT.Services.Core.ParallelTask.Start(System.Func<System.Threading.Tasks.Task!>! action, Microsoft.Extensions.Logging.ILogger! logger, System.Threading.CancellationToken cancellationToken) -> void
static LiIoT.Services.Core.ParallelTask.StartLongRunning(System.Action! action, Microsoft.Extensions.Logging.ILogger! logger, System.Threading.CancellationToken cancellationToken) -> void
static LiIoT.Services.SoftwareRulesAndStaticData.ConfigFileAtleastVersionToRun.get -> ushort
static LiIoT.Services.SoftwareRulesAndStaticData.ConfigFileLatestVersion.get -> ushort
static LiIoT.Services.SoftwareRulesAndStaticData.ConfigFileVersion.get -> ushort
static LiIoT.Services.SoftwareRulesAndStaticData.ConfigFileVersion.set -> void
static LiIoT.Services.SoftwareRulesAndStaticData.ConfigurationFilename.get -> string!
static LiIoT.Services.SoftwareRulesAndStaticData.DbFilename.get -> string!
static LiIoT.Services.SoftwareRulesAndStaticData.PathFoldername.get -> string!
static LiIoT.Services.SoftwareRulesAndStaticData.PathRuntimes.get -> string?
static LiIoT.Services.SoftwareRulesAndStaticData.PathRuntimes.set -> void
static LiIoT.Services.SoftwareRulesAndStaticData.Version.get -> string!
static LiIoT.Services.SoftwareRulesAndStaticData.VersionBuild.get -> string!
virtual LiIoT.Services.Contracts.LiIoTCoreService.OnStart() -> void